// Copyright (c) 2016, Open DICOMweb Project. All rights reserved.

// Use of this source code is governed by the open source license
// that can be found in the LICENSE file.
// Author: Jim Philbin <jfphilbin@gmail.edu> -
// See the AUTHORS file for other contributors.

import 'dart:convert';
import 'dart:io';

String cleanString(String s) {
  if (s[0] == '"') s = s.substring(1);
  int last = (s.length - 1);
  if (s[last] == '"') s = s.substring(0, last);
  s = s.replaceAll('"', '\"');
  return s;
}

// Utilities
bool isDigit(String s) {
  int min = "0".codeUnitAt(0);
  int max = "9".codeUnitAt(0);
  return ((min <=s.codeUnitAt(0)) && (s.codeUnitAt(0) <= max)) ? true : false;
}
// TODO move to generators.dart library
String cleanKeyword(String s) {
  // Remove spaces and apsotrophies
  s = s.replaceAll(' ', "");
  s = s.replaceAll("'", "");
  // Replace '/' and '-' with '_'
  s = s.replaceAll('/', "_");
  s = s.replaceAll("-", "_");
  if (isDigit(s[0])) s = "_" + s;
  return s;
}

class CodingSchemeClassTable {
  static const int kDesignator = 0;
  static const int kUid = 1;
  static const int kDescription = 2;
  static const int kKeyword = 3;
  String className;
  int fieldCount;
  List<String> fieldTypes;
  List<String> fieldNames;
  List<List<String>> values;

  CodingSchemeClassTable(this.className, this.fieldCount, this.fieldTypes,
                         this.fieldNames, this.values) {
    cleanValues();
  }

  void cleanValues() {
    print('values.length=${values.length}');
    for (int i = 0; i < values.length; i++) {
      List v = values[i];
      String designator = v[kDesignator];
      String uid = v[kUid];
      String description = cleanString(v[kDescription]);
      String keyword = cleanKeyword(v[kDesignator]);
      values[i] = [designator, uid, description, keyword];
    }
  }

  String commaSeparatedString(String prefix, List args, String suffix, {last: false}) {
    String s = "";
    int end = args.length - 1;
    for (int i = 0; i < end; i++) {
      s += '$prefix${args[i]}$suffix';
    }
    s += '$prefix${args[end]}';
    s += (last == false) ? "" : suffix;
    return s;
  }

  String get fieldsString {
    String s = "";
    for (int i = 0; i < fieldCount; i++) {
      s += "  final ${fieldTypes[i]} ${fieldNames[i]};\n";
    }
    return s;
  }

  String get constructorString {
    String args = "";
    //int end = fieldCount - 1;
    args = commaSeparatedString('this.', fieldNames, ", ");
    return '  const $className($args);';
  }

  String dcmStringToHex(String tag) {
    String s = '(' + tag.substring(2, 6) + ',' + tag.substring(6, 10) + ')';
    return s;
  }

  // Converts any tags of the form 0x60xx1234 to 0x60001234
  String fixTag(String tag) {
    String tmp = "0x";
    for (int i = 2; i < tag.length; i++) {
      if (tag[i] == 'x') {
        tmp += '0';
      } else {
        tmp += tag[i];
      }
    }
    return tmp;
  }

  // Create a [String] that corresponds to all the [const] members of the class
  String get valuesString {
    String valuesString = "";
    print('values.length=${values.length}');
    for (int i = 0; i < values.length; i++) {
      List v = values[i];
      String designator = v[kDesignator];
      String uid = v[kUid];
      String description = v[kDescription];
      String keyword = v[kKeyword];
      valuesString += '  static const $keyword = '
          'const $className("$designator", "$uid", "$description");'
          '\n';
    }
    return valuesString;
  }

  String get codingSchemeClassString => """
// Copyright (c) 2016, Open DICOMweb Project. All rights reserved.
// Use of this source code is governed by the open source license
// that can be found in the LICENSE file.
// Author: Jim Philbin <jfphilbin@gmail.edu> -
// See the AUTHORS file for other contributors.

// *** This file generated by '../gen/generate_class.dart' ***
// ----------------------------------------------------------

/// DICOM Coding Scheme Designators
class $className {
$fieldsString
$constructorString

static CodingScheme lookup(String designator) => map[designator];

$valuesString
$codingSchemeTables
}
""";

  // Create a [String] that corresponds to all the [const] members of the class
  String get codingSchemeDefinitions {
    String valuesString = "";
    for (int i = 0; i < values.length; i++) {
      List v = values[i];
      String designator = v[kDesignator];
      String keyword = v[kDesignator];
      String uid = v[kUid];
      String description = v[kDescription];
      valuesString +=
      '  static const k$keyword = const CodingScheme("$designator", "$uid", "$description");\n';
    }
    return valuesString;
  }

  String get codingSchemeTables {
    List<String> map = [];
    List<String> uidMap = [];
    List<String> mapKeys = [];
    List<String> mapValues = [];

    for (int i = 0; i < values.length; i++) {
      List v = values[i];
      String uid = v[kUid];
      String designator = v[kDesignator];
      String keyword = v[kKeyword];

      map.add('"$designator": $keyword');
      if (v[kUid] != "")
        uidMap.add('"$uid": $keyword');
      mapKeys.add('"$designator"');
      mapValues.add('$keyword');
    }

    var indent = "".padRight(4);
    var lines = uidMap.join(',\n$indent');

    var s = '  static const Map<String, CodingScheme> uidMap = const {\n$indent$lines};\n\n';
    lines = map.join(',\n$indent');
    s += '  static const Map<String, CodingScheme> map = const {\n$indent$lines};\n\n';
    lines = mapKeys.join(",\n$indent");
    s += '  static const List<String> tags = const [\n$indent$lines];\n\n';
    lines = mapValues.join(",\n$indent");
    s += '  static const List<String> actions = const [\n$indent$lines];\n\n';
    return s;
  }

  String get codingScheme => '''
// Copyright (c) 2016, Open DICOMweb Project. All rights reserved.
// Use of this source code is governed by the open source license
// that can be found in the LICENSE file.
// Author: Jim Philbin <jfphilbin@gmail.edu> -
// See the AUTHORS file for other contributors.

// *** This file generated by '..//generate_class.dart' ***
// ----------------------------------------------------------


class CodingScheme {
  final String designator;
  final String uid;
  final String description;

  const CodingScheme(this.tag, this.keyword, this.action);

  static lookup(int tag) => map[tag];

  }

$codingSchemeDefinitions

$codingSchemeTables

}
  ''';

  static CodingSchemeClassTable read(String filename) {
    File file = new File(filename);
    String s = file.readAsStringSync();
    Map m = JSON.decode(s);
    return new CodingSchemeClassTable(m["className"],
                                          m["fieldCount"],
                                          m["fieldTypes"],
                                          m["fieldNames"],
                                          m["values"]);
  }

  static void write(File file, CodingSchemeClassTable table) {
    String s = JSON.encode(table);
    file.writeAsStringSync(s);
  }



}